{"version":3,"sources":["images/logo.png","images/placeholder1.jpg","images/placeholder2.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Footer","Home","id","Slider","slideProperties","duration","transitionDuration","infinite","indicators","arrows","pauseOnHover","onChange","oldIndex","newIndex","console","log","style","require","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,2FCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,0C,6GCKpC,SAASC,IACd,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,iBACb,yBAAKC,IAAKC,IAAMF,UAAU,cAAcG,IAAI,iBAE9C,yBAAKH,UAAU,iBACb,uBAAGA,UAAU,gBAAb,UAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,oBAAb,cAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,mBAAb,aAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,oBAAb,cAEF,yBAAKA,UAAU,iBACb,uBAAGA,UAAU,kBAAb,aAOD,SAASI,IACd,OACE,yBAAKJ,UAAU,cACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,oBAAb,eAGJ,yBAAKA,UAAU,iBACb,yBAAKC,IAAKC,IAAMF,UAAU,cAAcG,IAAI,iBAE9C,yBAAKH,UAAU,iBACb,uBAAGA,UAAU,gBAAb,WAMD,SAASK,IACd,OACE,yBAAKC,GAAG,aACN,uBAAGN,UAAU,cAAb,yBACA,kBAACO,EAAD,MACA,yBAAKD,GAAG,mBACN,uBAAGN,UAAU,eAAb,YACA,yBAAKA,UAAU,wBACb,uBAAGA,UAAU,cAAb,yDASV,IAAMQ,EAAkB,CACtBC,SAAU,IACVC,mBAAoB,IACpBC,UAAU,EACVC,YAAY,EACZC,QAAQ,EACRC,cAAc,EACdC,SAAU,SAACC,EAAUC,GACjBC,QAAQC,IAAR,gCAAqCH,EAArC,eAAoDC,MAI3C,SAASV,IACtB,OACI,yBAAKP,UAAU,mBACb,kBAAC,QAAUQ,EACT,yBAAKR,UAAU,cACb,yBAAKoB,MAAO,CAAC,gBAAmB,OAASC,EAAQ,IAA+B,QAElF,yBAAKrB,UAAU,cACb,yBAAKoB,MAAO,CAAC,gBAAmB,OAASC,EAAQ,IAA+B,UC1ExEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC7B,EAAD,MACA8B,SAASC,eAAe,WAG5BH,IAASC,OACL,kBAACvB,EAAD,MACAwB,SAASC,eAAe,SAG5BH,IAASC,OACL,kBAACxB,EAAD,MACAyB,SAASC,eAAe,WDiHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.c57156d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d491653e.png\";","module.exports = __webpack_public_path__ + \"static/media/placeholder1.9d5303a7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/placeholder2.9457ccf4.jpg\";","import React from 'react';\nimport { Slide } from 'react-slideshow-image';\nimport logo from './images/logo.png';\nimport './App.css';\n\nexport function Header() {\n  return (\n    <div className=\"header-row\">\n      <div className=\"header-column\">\n        <img src={logo} className=\"header-logo\" alt=\"header-logo\"/>\n      </div>\n      <div className=\"header-column\">\n        <p className=\"header-about\">About</p>\n      </div>\n      <div className=\"header-column\">\n        <p className=\"header-subgroups\">Subgroups</p>\n      </div>\n      <div className=\"header-column\">\n        <p className=\"header-projects\">Projects</p>\n      </div>\n      <div className=\"header-column\">\n        <p className=\"header-tutorials\">Tutorials</p>\n      </div>\n      <div className=\"header-column\">\n        <p className=\"header-contact\">Contact</p>\n      </div>\n    </div>\n  )\n}\n\n\nexport function Footer() {\n  return (\n    <div className=\"footer-row\">\n      <div className=\"footer-column\">\n        <div className=\"resources\">\n          <p className=\"footer-resources\">Resources</p>\n        </div>\n      </div>\n      <div className=\"footer-column\">\n        <img src={logo} className=\"footer-logo\" alt=\"footer-logo\"/>\n      </div>\n      <div className=\"footer-column\">\n        <p className=\"footer-legal\">Legal</p>\n      </div>\n    </div>\n  );\n}\n\nexport function Home() {\n  return (\n    <div id=\"home-body\">\n      <p className=\"home-title\"> Welcome to UConn ACM</p>\n      <Slider/>\n      <div id=\"about-container\">\n        <p className=\"about-title\">About Us</p>\n        <div className=\"about-text-container\">\n          <p className=\"about-text\">\n            This will be filled with useful info eventually...\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst slideProperties = {\n  duration: 6000,\n  transitionDuration: 1000,\n  infinite: true,\n  indicators: true,\n  arrows: true,\n  pauseOnHover: true,\n  onChange: (oldIndex, newIndex) => {\n      console.log(`slide transition from ${oldIndex} to ${newIndex}`);\n  }\n}\n\nexport default function Slider () {\n  return (\n      <div className=\"slide-container\">\n        <Slide {...slideProperties}>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': 'url(' + require('./images/placeholder1.jpg') + ')'}}></div>\n          </div>\n          <div className=\"each-slide\">\n            <div style={{'backgroundImage': 'url(' + require('./images/placeholder2.jpg') + ')'}}></div>\n          </div>\n        </Slide>\n      </div>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Header, Footer, Home } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Header/>,\n    document.getElementById('header')\n);\n\nReactDOM.render(\n    <Home/>,\n    document.getElementById('body')\n);\n\nReactDOM.render(\n    <Footer/>,\n    document.getElementById('footer')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}